{
    "internal-server-error" : {
        "code": "internal-server-error",
        "description": "An ApiException was thrown but no error code was given",
        "status": 500,
        "class": "App\\Exception\\ApiException",
        "method": "__construct"
    },
    "abstract-rdf-document-missing-predicate" : {
        "code": "abstract-rdf-document-missing-predicate",
        "fields": [
            "predicate"
        ],
        "description": "A required predicate for this RDF resource is missing",
        "status": 400,
        "class": "App\\Rdf\\AbstractRdfDocument",
        "method": "errors"
    },
    "abstract-rdf-document-invalid-resource-type" : {
        "code": "abstract-rdf-document-invalid-resource-type",
        "description": "The given resource type does not match the configured resource type for this endpoint",
        "status": 400,
        "class": "App\\Rdf\\AbstractRdfDocument",
        "method": "errors"
    },
    "abstract-rdf-document-corrupt-rdf-resource-properties-null" : {
        "code": "abstract-rdf-document-corrupt-rdf-resource-properties-null",
        "description": "Properties could not be loaded from the rdf resource",
        "status": 400,
        "class": "App\\Rdf\\AbstractRdfDocument",
        "method": "errors"
    },
    "rdf-document-delete-missing-repository" : {
        "code": "rdf-document-delete-missing-repository",
        "description": "No repository is known to the document requested to be deleted",
        "status": 500,
        "class": "App\\Rdf\\AbstractRdfDocument",
        "method": "delete"
    },
    "rdf-document-save-missing-repository" : {
        "code": "rdf-document-save-missing-repository",
        "description": "No repository is known to the document requested to be saved",
        "status": 500,
        "class": "App\\Rdf\\AbstractRdfDocument",
        "method": "save"
    },
    "rdf-document-save-exception" : {
        "code": "rdf-document-save-exception",
        "fields": [
            "message"
        ],
        "description": "The insert threw an exception",
        "status": 500,
        "class": "App\\Rdf\\AbstractRdfDocument",
        "method": "save"
    },
    "dcterms-validate-created-literal-type" : {
        "code": "dcterms-validate-created-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the created predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#datetime'",
        "status": 422,
        "class": "App\\Ontology\\DcTerms",
        "method": "validateCreated"
    },
    "dcterms-validate-date-literal-type" : {
        "code": "dcterms-validate-date-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the date predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#datetime'",
        "status": 422,
        "class": "App\\Ontology\\DcTerms",
        "method": "validateDate"
    },
    "dcterms-validate-dateaccepted-literal-type" : {
        "code": "dcterms-validate-dateaccepted-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the dateaccepted predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#datetime'",
        "status": 422,
        "class": "App\\Ontology\\DcTerms",
        "method": "validateDateAccepted"
    },
    "dcterms-validate-dateapproved-literal-type" : {
        "code": "dcterms-validate-dateapproved-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the dateapproved predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#datetime'",
        "status": 422,
        "class": "App\\Ontology\\DcTerms",
        "method": "validateDateApproved"
    },
    "dcterms-validate-datecopyrighted-literal-type" : {
        "code": "dcterms-validate-datecopyrighted-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the datecopyrighted predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#datetime'",
        "status": 422,
        "class": "App\\Ontology\\DcTerms",
        "method": "validateDateCopyrighted"
    },
    "dcterms-validate-datesubmitted-literal-type" : {
        "code": "dcterms-validate-datesubmitted-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the datesubmitted predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#datetime'",
        "status": 422,
        "class": "App\\Ontology\\DcTerms",
        "method": "validateDateSubmitted"
    },
    "dcterms-validate-description-literal-type" : {
        "code": "dcterms-validate-description-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the description predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\DcTerms",
        "method": "validateDescription"
    },
    "dcterms-validate-license-literal-type" : {
        "code": "dcterms-validate-license-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the license predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\DcTerms",
        "method": "validateLicense"
    },
    "dcterms-validate-title-literal-type" : {
        "code": "dcterms-validate-title-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the title predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\DcTerms",
        "method": "validateTitle"
    },
    "openskos-validate-tenant-literal-type" : {
        "code": "openskos-validate-tenant-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the tenant predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateTenant"
    },
    "openskos-validate-tenant-regex" : {
        "code": "openskos-validate-tenant-regex",
        "fields": [
            "regex",
            "value"
        ],
        "description": "The object for the tenant predicate did not match the configured regex",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateTenant"
    },
    "openskos-validate-datedeleted-literal-type" : {
        "code": "openskos-validate-datedeleted-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the datedeleted predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#datetime'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateDateDeleted"
    },
    "openskos-validate-uuid-literal-type" : {
        "code": "openskos-validate-uuid-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the uuid predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateUuid"
    },
    "openskos-validate-uuid-regex" : {
        "code": "openskos-validate-uuid-regex",
        "fields": [
            "regex",
            "value"
        ],
        "description": "The object for the uuid predicate did not match the configured regex",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateUuid"
    },
    "openskos-validate-name-literal-type" : {
        "code": "openskos-validate-name-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the name predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateName"
    },
    "openskos-validate-disablesearchinothertenants-literal-type" : {
        "code": "openskos-validate-disablesearchinothertenants-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the disablesearchinothertenants predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#boolean'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateDisableSearchInOtherTenants"
    },
    "openskos-validate-enablestatussessystem-literal-type" : {
        "code": "openskos-validate-enablestatussessystem-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the enablestatussessystem predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#boolean'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateEnableStatussesSystem"
    },
    "openskos-validate-allow_oai-literal-type" : {
        "code": "openskos-validate-allow_oai-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the allow_oai predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#boolean'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateAllow_oai"
    },
    "openskos-validate-oai_baseurl-literal-type" : {
        "code": "openskos-validate-oai_baseurl-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the oai_baseurl predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateOai_baseURL"
    },
    "openskos-validate-conceptbaseuri-literal-type" : {
        "code": "openskos-validate-conceptbaseuri-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the conceptbaseuri predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateConceptBaseUri"
    },
    "openskos-validate-licenceurl-literal-type" : {
        "code": "openskos-validate-licenceurl-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the licenceurl predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateLicenceURL"
    },
    "openskos-validate-webpage-literal-type" : {
        "code": "openskos-validate-webpage-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the webpage predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateWebpage"
    },
    "openskos-validate-enableskosxl-literal-type" : {
        "code": "openskos-validate-enableskosxl-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the enableskosxl predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#boolean'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateEnableskosxl"
    },
    "openskos-validate-apikey-literal-type" : {
        "code": "openskos-validate-apikey-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the apikey predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateApikey"
    },
    "openskos-validate-errorcode-literal-type" : {
        "code": "openskos-validate-errorcode-literal-type",
        "fields": [
            "expected",
            "actual"
        ],
        "description": "The object for the errorcode predicate has a different type than 'http:\/\/www.w3.org\/2001\/XMLSchema#string'",
        "status": 422,
        "class": "App\\Ontology\\OpenSkos",
        "method": "validateErrorCode"
    },
    "permission-denied-invalid-credentials" : {
        "code": "permission-denied-invalid-credentials",
        "description": "Invalid credentials were given",
        "status": 403,
        "class": "App\\Security\\Authentication",
        "method": "requireAuthenticated"
    },
    "permission-denied-missing-credentials" : {
        "code": "permission-denied-missing-credentials",
        "description": "No credentials were given",
        "status": 401,
        "class": "App\\Security\\Authentication",
        "method": "requireAuthenticated"
    },
    "authentication-permission-denied-missing-role-administrator" : {
        "code": "authentication-permission-denied-missing-role-administrator",
        "description": "The requested action requires the 'administrator' role while the authenticated user does not posses it",
        "status": 403,
        "class": "App\\Security\\Authentication",
        "method": "requireAdministrator"
    },
    "user-getall-permission-denied-missing-user" : {
        "description": "The authenticated user could not be loaded",
        "status": 403,
        "code": "user-getall-permission-denied-missing-user",
        "class": "App\\OpenSkos\\User\\Controller\\UserController",
        "method": "geAllUsers"
    },
    "user-getall-permission-denied-missing-user-uri" : {
        "description": "The uri for the authenticated user could not be loaded",
        "status": 403,
        "code": "user-getall-permission-denied-missing-user-uri",
        "class": "App\\OpenSkos\\User\\Controller\\UserController",
        "method": "geAllUsers"
    },
    "user-getone-permission-denied-missing-user" : {
        "code": "user-getone-permission-denied-missing-user",
        "description": "The authenticated user could not be loaded",
        "status": 403,
        "class": "App\\OpenSkos\\User\\Controller\\UserController",
        "method": "getOneUser"
    },
    "user-getone-permission-denied-missing-user-uri" : {
        "code": "user-getone-permission-denied-missing-user-uri",
        "description": "The uri for the authenticated user could not be loaded",
        "status": 403,
        "class": "App\\OpenSkos\\User\\Controller\\UserController",
        "method": "getOneUser"
    },
    "user-getone-permission-denied-missing-role-administrator" : {
        "code": "user-getone-permission-denied-missing-role-administrator",
        "description": "The requested action requires the 'administrator' role while the authenticated user does not posses it",
        "status": 403,
        "class": "App\\OpenSkos\\User\\Controller\\UserController",
        "method": "getOneUser"
    },
    "user-getone-not-found-user" : {
        "code": "user-getone-not-found-user",
        "description": "The requested user could not be found",
        "status": 404,
        "class": "App\\OpenSkos\\User\\Controller\\UserController",
        "method": "getOneUser"
    },
    "institution-getall-filter-institutions-not-applicable" : {
        "code": "institution-getall-filter-institutions-not-applicable",
        "description": "An institutions filter was given in the request but it is not supported on this endpoint",
        "status": 400,
        "class": "App\\OpenSkos\\Institution\\Controller\\InstitutionController",
        "method": "getInstitutions"
    },
    "institution-getall-filter-sets-not-applicable" : {
        "code": "institution-getall-filter-sets-not-applicable",
        "description": "A sets filter was given in the request but it is not supported on this endpoint",
        "status": 400,
        "class": "App\\OpenSkos\\Institution\\Controller\\InstitutionController",
        "method": "getInstitutions"
    },
    "institution-getone-not-found" : {
        "code": "institution-getone-not-found",
        "fields": [
            "id"
        ],
        "description": "The requested institution could not be retreived",
        "status": 404,
        "class": "App\\OpenSkos\\Institution\\Controller\\InstitutionController",
        "method": "getInstitution"
    },
    "institution-create-empty-or-corrupt-body" : {
        "code": "institution-create-empty-or-corrupt-body",
        "description": "The body passed to this endpoint was either missing or corrupt",
        "status": 400,
        "class": "App\\OpenSkos\\Institution\\Controller\\InstitutionController",
        "method": "postInstitution"
    },
    "institution-create-already-exists" : {
        "code": "institution-create-already-exists",
        "fields": [
            "iri"
        ],
        "description": "An institution with the given iri already exists",
        "status": 409,
        "class": "App\\OpenSkos\\Institution\\Controller\\InstitutionController",
        "method": "postInstitution"
    },
    "institution-update-empty-or-corrupt-body" : {
        "code": "institution-update-empty-or-corrupt-body",
        "description": "The body passed to this endpoint was either missing or corrupt",
        "status": 400,
        "class": "App\\OpenSkos\\Institution\\Controller\\InstitutionController",
        "method": "putInstitution"
    },
    "institution-update-does-not-exist" : {
        "code": "institution-update-does-not-exist",
        "fields": [
            "iri"
        ],
        "description": "The institution with the given iri does not exist",
        "status": 400,
        "class": "App\\OpenSkos\\Institution\\Controller\\InstitutionController",
        "method": "putInstitution"
    },
    "set-getall-sets-filter" : {
        "code": "set-getall-sets-filter",
        "description": "A 'sets' filter was given but is not applicable to this endpoint",
        "status": 400,
        "class": "App\\OpenSkos\\Set\\Controller\\SetController",
        "method": "getSets"
    },
    "set-getone-not-found" : {
        "code": "set-getone-not-found",
        "fields": [
            "iri"
        ],
        "description": "The requested set could not be found",
        "status": 404,
        "class": "App\\OpenSkos\\Set\\Controller\\SetController",
        "method": "getSet"
    },
    "set-create-empty-or-corrupt-body" : {
        "code": "set-create-empty-or-corrupt-body",
        "description": "The body passed to this endpoint was either missing or corrupt",
        "status": 400,
        "class": "App\\OpenSkos\\Set\\Controller\\SetController",
        "method": "postSet"
    },
    "set-create-already-exists" : {
        "code": "set-create-already-exists",
        "fields": [
            "iri"
        ],
        "description": "A set with the given iri already exists",
        "status": 400,
        "class": "App\\OpenSkos\\Set\\Controller\\SetController",
        "method": "postSet"
    },
    "set-create-tenant-does-not-exist" : {
        "code": "set-create-tenant-does-not-exist",
        "fields": [
            "tenant"
        ],
        "description": "The given tenant to create a set for does not exist",
        "status": 400,
        "class": "App\\OpenSkos\\Set\\Controller\\SetController",
        "method": "postSet"
    },
    "set-update-empty-or-corrupt-body" : {
        "code": "set-update-empty-or-corrupt-body",
        "description": "The body passed to this endpoint was either missing or corrupt",
        "status": 400,
        "class": "App\\OpenSkos\\Set\\Controller\\SetController",
        "method": "putSet"
    },
    "set-update-does-not-exist" : {
        "code": "set-update-does-not-exist",
        "fields": [
            "iri"
        ],
        "description": "The set with the given iri does not exist",
        "status": 400,
        "class": "App\\OpenSkos\\Set\\Controller\\SetController",
        "method": "putSet"
    },
    "set-update-tenant-does-not-exist" : {
        "code": "set-update-tenant-does-not-exist",
        "fields": [
            "tenant"
        ],
        "description": "The given tenant to update a set for does not exist",
        "status": 400,
        "class": "App\\OpenSkos\\Set\\Controller\\SetController",
        "method": "putSet"
    },
    "set-base-uri-does-not-match-code" : {
        "code": "set-base-uri-does-not-match-code",
        "fields": [
            "code",
            "base-uri"
        ],
        "description": "The given openskos:code does not match the end of the given openskos:conceptBaseUri",
        "status": 422,
        "class": "App\\OpenSkos\\Set\\Set",
        "method": "errors"
    },
    "conceptscheme-getall-has-publisher-filter" : {
        "code": "conceptscheme-getall-has-publisher-filter",
        "description": "The search by Publisher URI for institutions could not be retrieved (Predicate is not used in Jena Store for Concept Schemes)",
        "status": 400,
        "class": "App\\OpenSkos\\ConceptScheme\\Controller\\ConceptSchemeController",
        "method": "conceptschemes"
    },
    "conceptscheme-getone-not-found" : {
        "code": "conceptscheme-getone-not-found",
        "fields": [
            "iri"
        ],
        "description": "The requested ConceptScheme could not be retreived",
        "status": 404,
        "class": "App\\OpenSkos\\ConceptScheme\\Controller\\ConceptSchemeController",
        "method": "conceptscheme"
    },
    "conceptscheme-create-empty-or-corrupt-body" : {
        "code": "conceptscheme-create-empty-or-corrupt-body",
        "description": "The body passed to this endpoint was either missing or corrupt",
        "status": 400,
        "class": "App\\OpenSkos\\ConceptScheme\\Controller\\ConceptSchemeController",
        "method": "postSet"
    },
    "conceptscheme-create-already-exists" : {
        "code": "conceptscheme-create-already-exists",
        "fields": [
            "iri"
        ],
        "description": "A ConceptScheme with the given iri already exists",
        "status": 409,
        "class": "App\\OpenSkos\\ConceptScheme\\Controller\\ConceptSchemeController",
        "method": "postSet"
    },
    "conceptscheme-create-tenant-does-not-exist" : {
        "code": "conceptscheme-create-tenant-does-not-exist",
        "fields": [
            "tenant"
        ],
        "description": "The given tenant to create a ConceptScheme for does not exist",
        "status": 400,
        "class": "App\\OpenSkos\\ConceptScheme\\Controller\\ConceptSchemeController",
        "method": "postSet"
    },
    "conceptscheme-create-set-does-not-exist" : {
        "code": "conceptscheme-create-set-does-not-exist",
        "fields": [
            "set"
        ],
        "description": "The given set to create a ConceptScheme for does not exist",
        "status": 400,
        "class": "App\\OpenSkos\\ConceptScheme\\Controller\\ConceptSchemeController",
        "method": "postSet"
    },
    "EOF": null
}
