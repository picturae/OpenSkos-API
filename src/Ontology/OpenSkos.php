<?php

/**
 * OpenSKOS.
 *
 * LICENSE
 *
 * This source file is subject to the GPLv3 license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.gnu.org/licenses/gpl-3.0.txt
 *
 * @category   OpenSKOS
 *
 * @copyright  Copyright (c) 2015 Picturae (http://www.picturae.com)
 * @author     Picturae
 * @license    http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 */

namespace App\Ontology;

use App\Annotation\Error;
use App\Rdf\Iri;
use App\Rdf\Literal\Literal;

final class OpenSkos
{
    const NAME_SPACE                      = 'http://openskos.org/xmlns#';
    const DATA_TYPE                       = 'http://openskos.org/xmlns#dataType';
    const LITERAL_TYPE                    = 'http://openskos.org/xmlns#literalType';
    const RESOURCE_TYPE                   = 'http://openskos.org/xmlns#resourceType';
    const TENANT                          = 'http://openskos.org/xmlns#tenant';
    const STATUS                          = 'http://openskos.org/xmlns#status';
    const TO_BE_CHECKED                   = 'http://openskos.org/xmlns#toBeChecked';
    const DATE_DELETED                    = 'http://openskos.org/xmlns#dateDeleted';
    const DELETED_BY                      = 'http://openskos.org/xmlns#deletedBy';
    const ACCEPTED_BY                     = 'http://openskos.org/xmlns#acceptedBy';
    const MODIFIED_BY                     = 'http://openskos.org/xmlns#modifiedBy';
    const UUID                            = 'http://openskos.org/xmlns#uuid';
    const SET                             = 'http://openskos.org/xmlns#set';
    const ROLE                            = 'http://openskos.org/xmlns#role';
    const IN_SKOS_COLLECTION              = 'http://openskos.org/xmlns#inSkosCollection';
    const CODE                            = 'http://openskos.org/xmlns#code';
    const NAME                            = 'http://openskos.org/xmlns#name';
    const DISABLE_SEARCH_IN_OTHER_TENANTS = 'http://openskos.org/xmlns#disableSearchInOtherTenants';
    const ENABLE_STATUSSES_SYSTEM         = 'http://openskos.org/xmlns#enableStatussesSystem';
    const ALLOW_OAI                       = 'http://openskos.org/xmlns#allow_oai';
    const OAI_BASE_URL                    = 'http://openskos.org/xmlns#oai_baseURL';
    const CONCEPT_BASE_URI                = 'http://openskos.org/xmlns#conceptBaseUri';
    const LICENCE_URL                     = 'http://openskos.org/xmlns#licenceURL';
    const WEBPAGE                         = 'http://openskos.org/xmlns#webpage';
    const ENABLESKOSXL                    = 'http://openskos.org/xmlns#enableskosxl';
    const NOTATIONUNIQUEPERTENANT         = 'http://openskos.org/xmlns#notationuniquepertenant';
    const NOTATIONAUTOGENERATED           = 'http://openskos.org/xmlns#notationautogenerated';
    const USERTYPE                        = 'http://openskos.org/xmlns#usertype';
    const APIKEY                          = 'http://openskos.org/xmlns#apikey';
    const IS_REPLACED_BY                  = 'http://openskos.org/xmlns#isReplacedBy';
    const REPLACES                        = 'http://openskos.org/xmlns#replaces';
    const IN_COLLECTION                   = 'http://openskos.org/xmlns#inCollection';
    const IN_SET                          = 'http://openskos.org/xmlns#inSet';
    const ERROR_CODE                      = 'http://openskos.org/xmlns#errorCode';
    const ERROR                           = 'http://openskos.org/xmlns#error';

    const STATUS_CANDIDATE     = 'candidate';
    const STATUS_APPROVED      = 'approved';
    const STATUS_REDIRECTED    = 'redirected';
    const STATUS_NOT_COMPLIANT = 'not_compliant';
    const STATUS_REJECTED      = 'rejected';
    const STATUS_OBSOLETE      = 'obsolete';
    const STATUS_DELETED       = 'deleted';

    const STATUSES = [
        self::STATUS_CANDIDATE,
        self::STATUS_APPROVED,
        self::STATUS_REDIRECTED,
        self::STATUS_NOT_COMPLIANT,
        self::STATUS_REJECTED,
        self::STATUS_OBSOLETE,
        self::STATUS_DELETED,
    ];

    const literaltypes = [
        'http://openskos.org/xmlns#dataType'                    => 'xsd:string',
        'http://openskos.org/xmlns#literalType'                 => 'xsd:string',
        'http://openskos.org/xmlns#resourceType'                => 'xsd:string',
        'http://openskos.org/xmlns#tenant'                      => 'xsd:string',
        'http://openskos.org/xmlns#status'                      => 'xsd:string',
        'http://openskos.org/xmlns#toBeChecked'                 => 'xsd:boolean',
        'http://openskos.org/xmlns#dateDeleted'                 => 'xsd:dateTime',
        'http://openskos.org/xmlns#uuid'                        => 'xsd:string',
        'http://openskos.org/xmlns#name'                        => 'xsd:string',
        'http://openskos.org/xmlns#disableSearchInOtherTenants' => 'xsd:boolean',
        'http://openskos.org/xmlns#enableStatussesSystem'       => 'xsd:boolean',
        'http://openskos.org/xmlns#allow_oai'                   => 'xsd:boolean',
        'http://openskos.org/xmlns#oai_baseURL'                 => 'xsd:string',
        'http://openskos.org/xmlns#conceptBaseUri'              => 'xsd:string',
        'http://openskos.org/xmlns#licenceURL'                  => 'xsd:string',
        'http://openskos.org/xmlns#webpage'                     => 'xsd:string',
        'http://openskos.org/xmlns#enableskosxl'                => 'xsd:boolean',
        'http://openskos.org/xmlns#usertype'                    => 'xsd:string',
        'http://openskos.org/xmlns#apikey'                      => 'xsd:string',
        'http://openskos.org/xmlns#errorCode'                   => 'xsd:string',
    ];

    /**
     * Returns the first encountered error for dataType.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-datatype-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the datatype predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateDataType($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-datatype-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for literalType.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-literaltype-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the literaltype predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateLiteralType($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-literaltype-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for resourceType.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-resourcetype-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the resourcetype predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateResourceType($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-resourcetype-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for tenant.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-tenant-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the tenant predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     * @Error(code="openskos-validate-tenant-regex",
     *        status=422,
     *        fields={"regex","value"},
     *        description="The object for the tenant predicate did not match the configured regex"
     *     )
     */
    public function validateTenant($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-tenant-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        $regex = '/[a-z]{1,4}/';
        if (!preg_match($regex, $value)) {
            return [
                'code' => 'openskos-validate-tenant-regex',
                'data' => [
                    'regex' => $regex,
                    'value' => $value,
                ],
            ];
        }

        return null;
    }

    /**
     * Returns the first encountered error for status.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-status-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the status predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     * @Error(code="openskos-validate-status-enum",
     *        status=422,
     *        fields={"allowed","given"},
     *        description="The object for the status predicate does not consist of an allowed value"
     *     )
     */
    public function validateStatus($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-status-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        $allowed = str_getcsv('candidate,approved,redirected,not_compliant,rejected,obsolete,deleted');
        if (!in_array($value, $allowed, true)) {
            return [
                'code' => 'openskos-validate-status-regex',
                'data' => [
                    'allowed' => $allowed,
                    'given'   => $value,
                ],
            ];
        }

        return null;
    }

    /**
     * Returns the first encountered error for toBeChecked.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-tobechecked-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the tobechecked predicate has a different type than 'http://www.w3.org/2001/XMLSchema#boolean'"
     *     )
     */
    public function validateToBeChecked($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#boolean' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-tobechecked-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#boolean',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for dateDeleted.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-datedeleted-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the datedeleted predicate has a different type than 'http://www.w3.org/2001/XMLSchema#dateTime'"
     *     )
     */
    public function validateDateDeleted($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#dateTime' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-datedeleted-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#dateTime',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for uuid.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-uuid-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the uuid predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     * @Error(code="openskos-validate-uuid-regex",
     *        status=422,
     *        fields={"regex","value"},
     *        description="The object for the uuid predicate did not match the configured regex"
     *     )
     */
    public function validateUuid($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-uuid-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        $regex = '/[0-9a-f]{8}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{12}/i';
        if (!preg_match($regex, $value)) {
            return [
                'code' => 'openskos-validate-uuid-regex',
                'data' => [
                    'regex' => $regex,
                    'value' => $value,
                ],
            ];
        }

        return null;
    }

    /**
     * Returns the first encountered error for role.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-role-enum",
     *        status=422,
     *        fields={"allowed","given"},
     *        description="The object for the role predicate does not consist of an allowed value"
     *     )
     */
    public function validateRole($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();
        }
        if (is_null($value)) {
            return null;
        }

        $allowed = str_getcsv('root,administrator,editor,user,guest');
        if (!in_array($value, $allowed, true)) {
            return [
                'code' => 'openskos-validate-role-regex',
                'data' => [
                    'allowed' => $allowed,
                    'given'   => $value,
                ],
            ];
        }

        return null;
    }

    /**
     * Returns the first encountered error for name.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-name-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the name predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateName($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-name-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for disableSearchInOtherTenants.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-disablesearchinothertenants-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the disablesearchinothertenants predicate has a different type than 'http://www.w3.org/2001/XMLSchema#boolean'"
     *     )
     */
    public function validateDisableSearchInOtherTenants($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#boolean' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-disablesearchinothertenants-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#boolean',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for enableStatussesSystem.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-enablestatussessystem-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the enablestatussessystem predicate has a different type than 'http://www.w3.org/2001/XMLSchema#boolean'"
     *     )
     */
    public function validateEnableStatussesSystem($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#boolean' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-enablestatussessystem-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#boolean',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for allow_oai.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-allow_oai-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the allow_oai predicate has a different type than 'http://www.w3.org/2001/XMLSchema#boolean'"
     *     )
     */
    public function validateAllow_oai($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#boolean' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-allow_oai-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#boolean',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for oai_baseURL.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-oai_baseurl-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the oai_baseurl predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateOai_baseURL($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-oai_baseurl-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for conceptBaseUri.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-conceptbaseuri-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the conceptbaseuri predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateConceptBaseUri($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-conceptbaseuri-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for licenceURL.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-licenceurl-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the licenceurl predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateLicenceURL($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-licenceurl-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for webpage.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-webpage-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the webpage predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateWebpage($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-webpage-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for enableskosxl.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-enableskosxl-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the enableskosxl predicate has a different type than 'http://www.w3.org/2001/XMLSchema#boolean'"
     *     )
     */
    public function validateEnableskosxl($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#boolean' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-enableskosxl-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#boolean',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for usertype.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-usertype-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the usertype predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     * @Error(code="openskos-validate-usertype-enum",
     *        status=422,
     *        fields={"allowed","given"},
     *        description="The object for the usertype predicate does not consist of an allowed value"
     *     )
     */
    public function validateUsertype($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-usertype-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        $allowed = str_getcsv('api,editor,both');
        if (!in_array($value, $allowed, true)) {
            return [
                'code' => 'openskos-validate-usertype-regex',
                'data' => [
                    'allowed' => $allowed,
                    'given'   => $value,
                ],
            ];
        }

        return null;
    }

    /**
     * Returns the first encountered error for apikey.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-apikey-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the apikey predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateApikey($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-apikey-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    /**
     * Returns the first encountered error for errorCode.
     * Returns null on success (a.k.a. no errors).
     *
     * @param Literal|Iri $value
     *
     * @Error(code="openskos-validate-errorcode-literal-type",
     *        status=422,
     *        fields={"expected","actual"},
     *        description="The object for the errorcode predicate has a different type than 'http://www.w3.org/2001/XMLSchema#string'"
     *     )
     */
    public function validateErrorCode($property): ?array
    {
        $value = null;
        if ($property instanceof Iri) {
            $value = $property->getUri();
        }
        if ($property instanceof Literal) {
            $value = $property->value();

            if ('http://www.w3.org/2001/XMLSchema#string' !== $property->typeIri()->getUri()) {
                return [
                    'code' => 'openskos-validate-errorcode-literal-type',
                    'data' => [
                        'expected' => 'http://www.w3.org/2001/XMLSchema#string',
                        'actual'   => $property->typeIri()->getUri(),
                    ],
                ];
            }
        }
        if (is_null($value)) {
            return null;
        }

        return null;
    }

    public static function vocabulary(): \EasyRdf_Graph
    {
        // Define graph structure
        $graph = new \EasyRdf_Graph('openskos.org');

        // Intro
        $openskos = $graph->resource('http://openskos.org/xmlns#');
        $openskos->setType('owl:Ontology');
        $openskos->addLiteral('dc:title', 'OpenSkos vocabulary');

        $dataType = $graph->resource('openskos:dataType');
        $dataType->setType('rdf:Property');
        $dataType->addLiteral('openskos:datatype', 'literal');
        $dataType->addLiteral('dcterms:description', 'The type of data that\'s supposed to go in the described field');

        $literalType = $graph->resource('openskos:literalType');
        $literalType->setType('rdf:Property');
        $literalType->addLiteral('openskos:datatype', 'literal');
        $literalType->addLiteral('dcterms:description', 'What kind of literal the described field is supposed to be');

        $resourceType = $graph->resource('openskos:resourceType');
        $resourceType->setType('rdf:Property');
        $resourceType->addLiteral('openskos:datatype', 'literal');
        $resourceType->addLiteral('dcterms:description', 'What kind of resource the described field is supposed to be');

        $tenant = $graph->resource('openskos:tenant');
        $tenant->setType('rdf:Property');
        $tenant->addLiteral('openskos:datatype', 'literal');
        $tenant->addLiteral('dcterms:description', 'A reference to an org:FormalOrganization by it\'s openskos:code field');

        $status = $graph->resource('openskos:status');
        $status->setType('rdf:Property');
        $status->addLiteral('openskos:datatype', 'literal');

        $toBeChecked = $graph->resource('openskos:toBeChecked');
        $toBeChecked->setType('rdf:Property');
        $toBeChecked->addLiteral('openskos:datatype', 'literal');

        $dateDeleted = $graph->resource('openskos:dateDeleted');
        $dateDeleted->setType('rdf:Property');
        $dateDeleted->addLiteral('openskos:datatype', 'literal');

        $deletedBy = $graph->resource('openskos:deletedBy');
        $deletedBy->setType('rdf:Property');
        $deletedBy->addLiteral('openskos:datatype', 'resource');

        $acceptedBy = $graph->resource('openskos:acceptedBy');
        $acceptedBy->setType('rdf:Property');
        $acceptedBy->addLiteral('openskos:datatype', 'resource');

        $modifiedBy = $graph->resource('openskos:modifiedBy');
        $modifiedBy->setType('rdf:Property');
        $modifiedBy->addLiteral('openskos:datatype', 'resource');

        $uuid = $graph->resource('openskos:uuid');
        $uuid->setType('rdf:Property');
        $uuid->addLiteral('openskos:datatype', 'literal');

        $set = $graph->resource('openskos:set');
        $set->setType('rdf:Property');
        $set->addLiteral('openskos:datatype', 'resource');
        $set->addResource('rdf:type', 'rdfs:Class');

        $role = $graph->resource('openskos:role');
        $role->setType('rdf:Property');
        $role->addLiteral('openskos:datatype', 'literal');

        $inSkosCollection = $graph->resource('openskos:inSkosCollection');
        $inSkosCollection->setType('rdf:Property');
        $inSkosCollection->addLiteral('openskos:datatype', 'literal');

        $code = $graph->resource('openskos:code');
        $code->setType('rdf:Property');
        $code->addLiteral('openskos:datatype', 'literal');
        $code->addLiteral('dcterms:description', 'Short unique identifier for an org:FormalOrganization');

        $name = $graph->resource('openskos:name');
        $name->setType('rdf:Property');
        $name->addLiteral('openskos:datatype', 'literal');

        $disableSearchInOtherTenants = $graph->resource('openskos:disableSearchInOtherTenants');
        $disableSearchInOtherTenants->setType('rdf:Property');
        $disableSearchInOtherTenants->addLiteral('openskos:datatype', 'literal');

        $enableStatussesSystem = $graph->resource('openskos:enableStatussesSystem');
        $enableStatussesSystem->setType('rdf:Property');
        $enableStatussesSystem->addLiteral('openskos:datatype', 'literal');

        $allow_oai = $graph->resource('openskos:allow_oai');
        $allow_oai->setType('rdf:Property');
        $allow_oai->addLiteral('openskos:datatype', 'literal');

        $oai_baseURL = $graph->resource('openskos:oai_baseURL');
        $oai_baseURL->setType('rdf:Property');
        $oai_baseURL->addLiteral('openskos:datatype', 'literal');

        $conceptBaseUri = $graph->resource('openskos:conceptBaseUri');
        $conceptBaseUri->setType('rdf:Property');
        $conceptBaseUri->addLiteral('openskos:datatype', 'literal');

        $licenceURL = $graph->resource('openskos:licenceURL');
        $licenceURL->setType('rdf:Property');
        $licenceURL->addLiteral('openskos:datatype', 'literal');

        $webpage = $graph->resource('openskos:webpage');
        $webpage->setType('rdf:Property');
        $webpage->addLiteral('openskos:datatype', 'literal');

        $enableskosxl = $graph->resource('openskos:enableskosxl');
        $enableskosxl->setType('rdf:Property');
        $enableskosxl->addLiteral('openskos:datatype', 'literal');

        $notationuniquepertenant = $graph->resource('openskos:notationuniquepertenant');
        $notationuniquepertenant->setType('rdf:Property');
        $notationuniquepertenant->addLiteral('openskos:datatype', 'literal');

        $notationautogenerated = $graph->resource('openskos:notationautogenerated');
        $notationautogenerated->setType('rdf:Property');
        $notationautogenerated->addLiteral('openskos:datatype', 'literal');

        $usertype = $graph->resource('openskos:usertype');
        $usertype->setType('rdf:Property');
        $usertype->addLiteral('openskos:datatype', 'literal');

        $apikey = $graph->resource('openskos:apikey');
        $apikey->setType('rdf:Property');
        $apikey->addLiteral('openskos:datatype', 'literal');

        $isReplacedBy = $graph->resource('openskos:isReplacedBy');
        $isReplacedBy->setType('rdf:Property');
        $isReplacedBy->addLiteral('openskos:datatype', 'resource');

        $replaces = $graph->resource('openskos:replaces');
        $replaces->setType('rdf:Property');
        $replaces->addLiteral('openskos:datatype', 'resource');

        $inCollection = $graph->resource('openskos:inCollection');
        $inCollection->setType('rdf:Property');
        $inCollection->addLiteral('openskos:datatype', 'resource');

        $inSet = $graph->resource('openskos:inSet');
        $inSet->setType('rdf:Property');
        $inSet->addLiteral('openskos:datatype', 'resource');

        $errorCode = $graph->resource('openskos:errorCode');
        $errorCode->setType('rdf:Property');
        $errorCode->addLiteral('openskos:datatype', 'literal');

        $error = $graph->resource('openskos:error');
        $error->setType('rdfs:Class');
        $error->addLiteral('openskos:datatype', 'class');
        $error->addResource('rdf:Property', 'dcterms:description');
        $error->addResource('rdf:Property', 'http:sc');
        $error->addResource('rdf:Property', 'openskos:errorCode');
        $error->addResource('rdf:Property', 'rdf:Property');

        return $graph;
    }
}
