<?php

namespace App\Ontology;

final class Context
{
    const prefixes = [
        'dc' => Dc::NAME_SPACE,
        'dcmi' => Dcmi::NAME_SPACE,
        'dcterms' => DcTerms::NAME_SPACE,
        'foaf' => Foaf::NAME_SPACE,
        'openskos' => OpenSkos::NAME_SPACE,
        'org' => Org::NAME_SPACE,
        'owl' => Owl::NAME_SPACE,
        'rdf' => Rdf::NAME_SPACE,
        'rdfs' => Rdfs::NAME_SPACE,
        'skos' => Skos::NAME_SPACE,
        'skosxl' => SkosXl::NAME_SPACE,
        'vcard' => VCard::NAME_SPACE,
        'xsd' => Xsd::NAME_SPACE,
    ];

    const datatype = [
        'dc:creator' => 'resource',
        'dc:contributor' => 'resource',
        'dc:title' => 'literal',
        'dcmi:Dataset' => 'class',
        'dcterms:abstract' => 'literal',
        'dcterms:accessRights' => 'literal',
        'dcterms:accrualMethod' => 'literal',
        'dcterms:accrualPeriodicity' => 'literal',
        'dcterms:accrualPolicy' => 'literal',
        'dcterms:alternative' => 'literal',
        'dcterms:audience' => 'literal',
        'dcterms:available' => 'literal',
        'dcterms:bibliographicCitation' => 'literal',
        'dcterms:conformsTo' => 'literal',
        'dcterms:contributor' => 'literal',
        'dcterms:coverage' => 'literal',
        'dcterms:created' => 'literal',
        'dcterms:creator' => 'literal',
        'dcterms:date' => 'literal',
        'dcterms:dateAccepted' => 'literal',
        'dcterms:dateApproved' => 'literal',
        'dcterms:dateCopyrighted' => 'literal',
        'dcterms:dateSubmitted' => 'literal',
        'dcterms:description' => 'literal',
        'dcterms:educationLevel' => 'literal',
        'dcterms:extent' => 'literal',
        'dcterms:format' => 'literal',
        'dcterms:hasFormat' => 'literal',
        'dcterms:hasPart' => 'literal',
        'dcterms:hasVersion' => 'literal',
        'dcterms:identifier' => 'literal',
        'dcterms:instructionalMethod' => 'literal',
        'dcterms:isFormatOf' => 'literal',
        'dcterms:isPartOf' => 'literal',
        'dcterms:isReferencedBy' => 'literal',
        'dcterms:isReplacedBy' => 'literal',
        'dcterms:isRequiredBy' => 'literal',
        'dcterms:issued' => 'literal',
        'dcterms:isVersionOf' => 'literal',
        'dcterms:language' => 'literal',
        'dcterms:license' => 'literal',
        'dcterms:mediator' => 'literal',
        'dcterms:medium' => 'literal',
        'dcterms:modified' => 'literal',
        'dcterms:provenance' => 'literal',
        'dcterms:publisher' => 'literal',
        'dcterms:references' => 'literal',
        'dcterms:relation' => 'literal',
        'dcterms:replaces' => 'literal',
        'dcterms:requires' => 'literal',
        'dcterms:rights' => 'literal',
        'dcterms:rightsHolder' => 'literal',
        'dcterms:source' => 'literal',
        'dcterms:spatial' => 'literal',
        'dcterms:subject' => 'literal',
        'dcterms:tableOfContents' => 'literal',
        'dcterms:temporal' => 'literal',
        'dcterms:title' => 'literal',
        'dcterms:type' => 'literal',
        'dcterms:valid' => 'literal',
        'foaf:Person' => 'class',
        'foaf:name' => 'literal',
        'foaf:mbox' => 'literal',
        'openskos:datatype' => 'literal',
        'openskos:tenant' => 'literal',
        'openskos:status' => 'literal',
        'openskos:toBeChecked' => 'literal',
        'openskos:dateDeleted' => 'literal',
        'openskos:deletedBy' => 'resource',
        'openskos:acceptedBy' => 'resource',
        'openskos:modifiedBy' => 'resource',
        'openskos:uuid' => 'literal',
        'openskos:set' => 'resource',
        'openskos:role' => 'literal',
        'openskos:inSkosCollection' => 'literal',
        'openskos:code' => 'literal',
        'openskos:name' => 'literal',
        'openskos:disableSearchInOtherTenants' => 'literal',
        'openskos:enableStatussesSystem' => 'literal',
        'openskos:allow_oai' => 'literal',
        'openskos:oai_baseURL' => 'literal',
        'openskos:conceptBaseUri' => 'literal',
        'openskos:licenceURL' => 'literal',
        'openskos:webpage' => 'literal',
        'openskos:enableskosxl' => 'literal',
        'openskos:notationuniquepertenant' => 'literal',
        'openskos:notationautogenerated' => 'literal',
        'openskos:usertype' => 'literal',
        'openskos:apikey' => 'literal',
        'openskos:isReplacedBy' => 'resource',
        'openskos:replaces' => 'resource',
        'openskos:inCollection' => 'resource',
        'openskos:inSet' => 'resource',
        'org:FormalOrganization' => 'class',
        'owl:objectProperty' => 'resource',
        'rdf:type' => 'resource',
        'rdfs:comment' => 'literal',
        'rdfs:subPropertyOf' => 'resource',
        'rdfs:domain' => 'resource',
        'rdfs:range' => 'resource',
        'skos:Concept' => 'resource',
        'skos:ConceptScheme' => 'resource',
        'skos:inScheme' => 'resource',
        'skos:hasTopConcept' => 'literal',
        'skos:topConceptOf' => 'resource',
        'skos:altLabel' => 'literal',
        'skos:hiddenLabel' => 'literal',
        'skos:prefLabel' => 'literal',
        'skos:notation' => 'literal',
        'skos:changeNote' => 'literal',
        'skos:definition' => 'literal',
        'skos:editorialNote' => 'literal',
        'skos:example' => 'literal',
        'skos:historyNote' => 'literal',
        'skos:note' => 'literal',
        'skos:scopeNote' => 'literal',
        'skos:broader' => 'resource',
        'skos:broaderTransitive' => 'resource',
        'skos:narrower' => 'resource',
        'skos:narrowerTransitive' => 'resource',
        'skos:related' => 'resource',
        'skos:semanticRelation' => 'resource',
        'skos:Collection' => 'resource',
        'skos:OrderedCollection' => 'resource',
        'skos:member' => 'resource',
        'skos:memberList' => 'resource',
        'skos:broadMatch' => 'resource',
        'skos:broaderMatch' => 'resource',
        'skos:closeMatch' => 'resource',
        'skos:exactMatch' => 'resource',
        'skos:mappingRelation' => 'resource',
        'skos:narrowMatch' => 'resource',
        'skos:narrowerMatch' => 'resource',
        'skos:relatedMatch' => 'resource',
        'skosxl:Label' => 'class',
        'skosxl:altLabel' => 'literal',
        'skosxl:hiddenLabel' => 'literal',
        'skosxl:labelRelation' => 'resource',
        'skosxl:literalForm' => 'literal',
        'skosxl:prefLabel' => 'literal',
        'vcard:ORG' => 'literal',
        'vcard:orgname' => 'literal',
        'vcard:orgunit' => 'literal',
        'vcard:URL' => 'literal',
        'vcard:EMAIL' => 'literal',
        'vcard:ADR' => 'literal',
        'vcard:Street' => 'literal',
        'vcard:Locality' => 'literal',
        'vcard:Pcode' => 'literal',
        'vcard:Country' => 'literal',
        'xsd:nonNegativeInteger' => 'class',
    ];

    /**
     * Build a context based on short names.
     *
     * @param array $names
     *
     * @return array
     */
    public static function build($names = []): array
    {
        $result = [];

        foreach ($names as $name) {
            if (isset(self::prefixes[$name])) {
                $result[$name] = self::prefixes[$name];
            }
        }

        return $result;
    }

    /**
     * array_walk_recursive, including branch nodes.
     *
     * @param array    $arr
     * @param callable $callback Arguments: <item, key>
     */
    private static function walk(array $arr, callable $callback): void
    {
        foreach ($arr as $key => $value) {
            call_user_func($callback, $value, $key);
            if (is_array($value)) {
                self::walk($value, $callback);
            }
        }
    }

    /**
     * Return the namespace belonging to the uri.
     *
     * @param mixed $uri
     *
     * @return string|bool
     */
    private static function detectNamespaceFromUri($uri)
    {
        if (!is_string($uri)) {
            return false;
        }
        foreach (self::prefixes as $prefix => $namespace) {
            if (substr($uri, 0, strlen($namespace)) === $namespace) {
                return $prefix;
            }
        }

        return false;
    }

    /**
     * Automatically detect namespaces from a given graph.
     *
     * @param \EasyRdf_Graph $graph
     *
     * @return array
     */
    public static function detect(\EasyRdf_Graph $graph): array
    {
        $result = [];
        $known = self::prefixes;

        // Walk through the whole graph
        // CAUTION: this may result in a performance hit
        self::walk(
            $graph->toRdfPhp(),
            function ($item, string $key) use (&$result, $known) {
                $keyNamespace = self::detectNamespaceFromUri($key);
                $itemNamespace = self::detectNamespaceFromUri($item);

                if (false !== $keyNamespace) {
                    $result[$keyNamespace] = $known[$keyNamespace];
                }
                if (false !== $itemNamespace) {
                    $result[$itemNamespace] = $known[$itemNamespace];
                }
            }
        );

        // Sort the result to ensure the same results
        ksort($result);

        return $result;
    }

    /**
     * Registers all known namespaces into EasyRdf.
     */
    public static function setupEasyRdf(): void
    {
        foreach (self::prefixes as $prefix => $namespace) {
            \EasyRdf_Namespace::set($prefix, $namespace);
        }
    }
}
